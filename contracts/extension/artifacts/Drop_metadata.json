{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "expected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "actual",
						"type": "uint256"
					}
				],
				"name": "DropClaimExceedLimit",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "expected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "actual",
						"type": "uint256"
					}
				],
				"name": "DropClaimExceedMaxSupply",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "expectedCurrency",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "expectedPricePerToken",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "actualCurrency",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualExpectedPricePerToken",
						"type": "uint256"
					}
				],
				"name": "DropClaimInvalidTokenPrice",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "expected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "actual",
						"type": "uint256"
					}
				],
				"name": "DropClaimNotStarted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DropExceedMaxSupply",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DropNoActiveCondition",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DropUnauthorized",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "startTimestamp",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxClaimableSupply",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "supplyClaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							}
						],
						"indexed": false,
						"internalType": "struct IClaimCondition.ClaimCondition[]",
						"name": "claimConditions",
						"type": "tuple[]"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "resetEligibility",
						"type": "bool"
					}
				],
				"name": "ClaimConditionsUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "claimConditionIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "claimer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "quantityClaimed",
						"type": "uint256"
					}
				],
				"name": "TokensClaimed",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_currency",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_pricePerToken",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "bytes32[]",
								"name": "proof",
								"type": "bytes32[]"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							}
						],
						"internalType": "struct IDrop.AllowlistProof",
						"name": "_allowlistProof",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "claim",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimCondition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "currentStartId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "count",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getActiveClaimConditionId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_conditionId",
						"type": "uint256"
					}
				],
				"name": "getClaimConditionById",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "startTimestamp",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxClaimableSupply",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "supplyClaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							}
						],
						"internalType": "struct IClaimCondition.ClaimCondition",
						"name": "condition",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_conditionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_claimer",
						"type": "address"
					}
				],
				"name": "getSupplyClaimedByWallet",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "supplyClaimedByWallet",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "startTimestamp",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxClaimableSupply",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "supplyClaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							}
						],
						"internalType": "struct IClaimCondition.ClaimCondition[]",
						"name": "_conditions",
						"type": "tuple[]"
					},
					{
						"internalType": "bool",
						"name": "_resetClaimEligibility",
						"type": "bool"
					}
				],
				"name": "setClaimConditions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_conditionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_claimer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_currency",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_pricePerToken",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "bytes32[]",
								"name": "proof",
								"type": "bytes32[]"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							}
						],
						"internalType": "struct IDrop.AllowlistProof",
						"name": "_allowlistProof",
						"type": "tuple"
					}
				],
				"name": "verifyClaim",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isOverride",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"DropClaimExceedLimit(uint256,uint256)": [
					{
						"details": "Claim condition exceeded limit"
					}
				],
				"DropClaimExceedMaxSupply(uint256,uint256)": [
					{
						"details": "Claim condition exceeded max supply"
					}
				],
				"DropClaimInvalidTokenPrice(address,uint256,address,uint256)": [
					{
						"details": "Claim condition invalid currency or price"
					}
				],
				"DropClaimNotStarted(uint256,uint256)": [
					{
						"details": "Claim condition not started yet"
					}
				],
				"DropExceedMaxSupply()": [
					{
						"details": "Exceeded the max token total supply"
					}
				],
				"DropNoActiveCondition()": [
					{
						"details": "No active claim condition"
					}
				],
				"DropUnauthorized()": [
					{
						"details": "The sender is not authorized to perform the action"
					}
				]
			},
			"kind": "dev",
			"methods": {
				"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
					"details": "Lets an account claim tokens."
				},
				"getActiveClaimConditionId()": {
					"details": "At any given moment, returns the uid for the active claim condition."
				},
				"getClaimConditionById(uint256)": {
					"details": "Returns the claim condition at the given uid."
				},
				"getSupplyClaimedByWallet(uint256,address)": {
					"details": "Returns the supply claimed by claimer for a given conditionId."
				},
				"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)": {
					"details": "Lets a contract admin set claim conditions."
				},
				"verifyClaim(uint256,address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": {
					"details": "Checks a request to claim NFTs against the active claim condition's criteria."
				}
			},
			"stateVariables": {
				"claimCondition": {
					"details": "The active conditions for claiming tokens."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"ClaimConditionsUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)": {
					"notice": "Emitted when the contract's claim conditions are updated."
				},
				"TokensClaimed(uint256,address,address,uint256,uint256)": {
					"notice": "Emitted when tokens are claimed via `claim`."
				}
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/extension/Drop.sol": "Drop"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/extension/Drop.sol": {
			"keccak256": "0x4161a9037c596f6da6b70d8f41c5edbce350c44d418b202247054a94472f517d",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://219597e588b9f943e1a74e9c73ef6090f55070f7bbc8fafef2efc9f4023d09a1",
				"dweb:/ipfs/QmWR1XGDiG5khsg6Dpeh2cabUCG3JJ4KSvLsXiXzqBR5NJ"
			]
		},
		"contracts/extension/interface/IClaimCondition.sol": {
			"keccak256": "0x7eb50217f513a762467f67bf65b264f8b408d98ac755ab5b34505fa55dda7714",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fab23b3d54bd6bdafd5e43156df69d799e7f6e5fdbb2bc88f3a51c2c31586786",
				"dweb:/ipfs/QmTMHziEAzbuv11AgVC3i3RpCtoxjHCciKL2tLBR3uQREe"
			]
		},
		"contracts/extension/interface/IClaimConditionMultiPhase.sol": {
			"keccak256": "0x292ecd48ea8e0d58e192c4ceeb617c0664f453d47c59b8311417fee3f6be6bbe",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://82c7de86e56e2d8192afddfcce24bc5af1b786c8799c0194f40e69f3a8aaa3ce",
				"dweb:/ipfs/Qmdr1z3iCuGgvU2UEfAyi2wsYx7aaVbn128zhNQP8jSHm9"
			]
		},
		"contracts/extension/interface/IDrop.sol": {
			"keccak256": "0x8e981fc1753981a493ece022a3aa947ab7a2be3ab4ec6678f9ef180fc61cb5a7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://d819d70571c509cbfb13bdcecea3850cc19d63095a63e13485c5719f2f5835c9",
				"dweb:/ipfs/QmVEzz3vZvfKbUkM8nAtixmXcwbtot3i5P1Bzngkkg9gqm"
			]
		},
		"contracts/lib/MerkleProof.sol": {
			"keccak256": "0xb40798a3d44b4028f7e56220a2fabb7c91416b0dce9413821f8d62f5bb7d152b",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://1fe861d8c6b2dbe5df20aa27053a4d5e2d848937c81b1918bd5a86847d85453c",
				"dweb:/ipfs/QmQ3LYRBh3pXynUEhxq8iaHuUCWpaoCkYJrp9Mc1dTGCgi"
			]
		}
	},
	"version": 1
}