{
	"id": "d45505e0cbd22bf239a180bb5053ea78",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/extension/interface/IClaimConditionMultiPhase.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\nimport \"./IClaimCondition.sol\";\n\n/**\n *  The interface `IClaimConditionMultiPhase` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\n *\n *  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.\n *  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n *  or added to by the contract admin. At any moment, there is only one active claim condition.\n */\n\ninterface IClaimConditionMultiPhase is IClaimCondition {\n    /**\n     *  @notice The set of all claim conditions, at any given moment.\n     *  Claim Phase ID = [currentStartId, currentStartId + length - 1];\n     *\n     *  @param currentStartId           The uid for the first claim condition amongst the current set of\n     *                                  claim conditions. The uid for each next claim condition is one\n     *                                  more than the previous claim condition's uid.\n     *\n     *  @param count                    The total number of phases / claim conditions in the list\n     *                                  of claim conditions.\n     *\n     *  @param conditions                   The claim conditions at a given uid. Claim conditions\n     *                                  are ordered in an ascending order by their `startTimestamp`.\n     *\n     *  @param supplyClaimedByWallet    Map from a claim condition uid and account to supply claimed by account.\n     */\n    struct ClaimConditionList {\n        uint256 currentStartId;\n        uint256 count;\n        mapping(uint256 => ClaimCondition) conditions;\n        mapping(uint256 => mapping(address => uint256)) supplyClaimedByWallet;\n    }\n}"
			},
			"contracts/extension/interface/IClaimCondition.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @author thirdweb\n\n/**\n *  The interface `IClaimCondition` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\n *\n *  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n *  or added to by the contract admin. At any moment, there is only one active claim condition.\n */\n\ninterface IClaimCondition {\n    /**\n     *  @notice The criteria that make up a claim condition.\n     *\n     *  @param startTimestamp                 The unix timestamp after which the claim condition applies.\n     *                                        The same claim condition applies until the `startTimestamp`\n     *                                        of the next claim condition.\n     *\n     *  @param maxClaimableSupply             The maximum total number of tokens that can be claimed under\n     *                                        the claim condition.\n     *\n     *  @param supplyClaimed                  At any given point, the number of tokens that have been claimed\n     *                                        under the claim condition.\n     *\n     *  @param quantityLimitPerWallet         The maximum number of tokens that can be claimed by a wallet.\n     *\n     *  @param merkleRoot                     The allowlist of addresses that can claim tokens under the claim\n     *                                        condition.\n     *\n     *  @param pricePerToken                  The price required to pay per token claimed.\n     *\n     *  @param currency                       The currency in which the `pricePerToken` must be paid.\n     *\n     *  @param metadata                       Claim condition metadata.\n     */\n    struct ClaimCondition {\n        uint256 startTimestamp;\n        uint256 maxClaimableSupply;\n        uint256 supplyClaimed;\n        uint256 quantityLimitPerWallet;\n        bytes32 merkleRoot;\n        uint256 pricePerToken;\n        address currency;\n        string metadata;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/extension/interface/IClaimCondition.sol": {
				"IClaimCondition": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The interface `IClaimCondition` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimCondition.sol\":\"IClaimCondition\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x7eb50217f513a762467f67bf65b264f8b408d98ac755ab5b34505fa55dda7714\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fab23b3d54bd6bdafd5e43156df69d799e7f6e5fdbb2bc88f3a51c2c31586786\",\"dweb:/ipfs/QmTMHziEAzbuv11AgVC3i3RpCtoxjHCciKL2tLBR3uQREe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "The interface `IClaimCondition` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.",
						"version": 1
					}
				}
			},
			"contracts/extension/interface/IClaimConditionMultiPhase.sol": {
				"IClaimConditionMultiPhase": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The interface `IClaimConditionMultiPhase` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimConditionMultiPhase.sol\":\"IClaimConditionMultiPhase\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x7eb50217f513a762467f67bf65b264f8b408d98ac755ab5b34505fa55dda7714\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fab23b3d54bd6bdafd5e43156df69d799e7f6e5fdbb2bc88f3a51c2c31586786\",\"dweb:/ipfs/QmTMHziEAzbuv11AgVC3i3RpCtoxjHCciKL2tLBR3uQREe\"]},\"contracts/extension/interface/IClaimConditionMultiPhase.sol\":{\"keccak256\":\"0x292ecd48ea8e0d58e192c4ceeb617c0664f453d47c59b8311417fee3f6be6bbe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://82c7de86e56e2d8192afddfcce24bc5af1b786c8799c0194f40e69f3a8aaa3ce\",\"dweb:/ipfs/Qmdr1z3iCuGgvU2UEfAyi2wsYx7aaVbn128zhNQP8jSHm9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "The interface `IClaimConditionMultiPhase` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/extension/interface/IClaimCondition.sol": {
				"ast": {
					"absolutePath": "contracts/extension/interface/IClaimCondition.sol",
					"exportedSymbols": {
						"IClaimCondition": [
							21
						]
					},
					"id": 22,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IClaimCondition",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "86:345:0",
								"text": "  The interface `IClaimCondition` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\n  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n  or added to by the contract admin. At any moment, there is only one active claim condition."
							},
							"fullyImplemented": true,
							"id": 21,
							"linearizedBaseContracts": [
								21
							],
							"name": "IClaimCondition",
							"nameLocation": "443:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IClaimCondition.ClaimCondition",
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "465:1313:0",
										"text": "  @notice The criteria that make up a claim condition.\n  @param startTimestamp                 The unix timestamp after which the claim condition applies.\n                                        The same claim condition applies until the `startTimestamp`\n                                        of the next claim condition.\n  @param maxClaimableSupply             The maximum total number of tokens that can be claimed under\n                                        the claim condition.\n  @param supplyClaimed                  At any given point, the number of tokens that have been claimed\n                                        under the claim condition.\n  @param quantityLimitPerWallet         The maximum number of tokens that can be claimed by a wallet.\n  @param merkleRoot                     The allowlist of addresses that can claim tokens under the claim\n                                        condition.\n  @param pricePerToken                  The price required to pay per token claimed.\n  @param currency                       The currency in which the `pricePerToken` must be paid.\n  @param metadata                       Claim condition metadata."
									},
									"id": 20,
									"members": [
										{
											"constant": false,
											"id": 5,
											"mutability": "mutable",
											"name": "startTimestamp",
											"nameLocation": "1823:14:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "1815:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 4,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1815:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 7,
											"mutability": "mutable",
											"name": "maxClaimableSupply",
											"nameLocation": "1855:18:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "1847:26:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 6,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1847:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 9,
											"mutability": "mutable",
											"name": "supplyClaimed",
											"nameLocation": "1891:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "1883:21:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 8,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1883:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 11,
											"mutability": "mutable",
											"name": "quantityLimitPerWallet",
											"nameLocation": "1922:22:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "1914:30:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 10,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1914:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 13,
											"mutability": "mutable",
											"name": "merkleRoot",
											"nameLocation": "1962:10:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "1954:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 12,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1954:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 15,
											"mutability": "mutable",
											"name": "pricePerToken",
											"nameLocation": "1990:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "1982:21:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 14,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1982:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 17,
											"mutability": "mutable",
											"name": "currency",
											"nameLocation": "2021:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "2013:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 16,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2013:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 19,
											"mutability": "mutable",
											"name": "metadata",
											"nameLocation": "2046:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 20,
											"src": "2039:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 18,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "2039:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ClaimCondition",
									"nameLocation": "1790:14:0",
									"nodeType": "StructDefinition",
									"scope": 21,
									"src": "1783:278:0",
									"visibility": "public"
								}
							],
							"scope": 22,
							"src": "433:1630:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "39:2024:0"
				},
				"id": 0
			},
			"contracts/extension/interface/IClaimConditionMultiPhase.sol": {
				"ast": {
					"absolutePath": "contracts/extension/interface/IClaimConditionMultiPhase.sol",
					"exportedSymbols": {
						"IClaimCondition": [
							21
						],
						"IClaimConditionMultiPhase": [
							45
						]
					},
					"id": 46,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 23,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:1"
						},
						{
							"absolutePath": "contracts/extension/interface/IClaimCondition.sol",
							"file": "./IClaimCondition.sol",
							"id": 24,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 46,
							"sourceUnit": 22,
							"src": "86:31:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 26,
										"name": "IClaimCondition",
										"nameLocations": [
											"624:15:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 21,
										"src": "624:15:1"
									},
									"id": 27,
									"nodeType": "InheritanceSpecifier",
									"src": "624:15:1"
								}
							],
							"canonicalName": "IClaimConditionMultiPhase",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 25,
								"nodeType": "StructuredDocumentation",
								"src": "119:464:1",
								"text": "  The interface `IClaimConditionMultiPhase` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\n  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.\n  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n  or added to by the contract admin. At any moment, there is only one active claim condition."
							},
							"fullyImplemented": true,
							"id": 45,
							"linearizedBaseContracts": [
								45,
								21
							],
							"name": "IClaimConditionMultiPhase",
							"nameLocation": "595:25:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IClaimConditionMultiPhase.ClaimConditionList",
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "646:946:1",
										"text": "  @notice The set of all claim conditions, at any given moment.\n  Claim Phase ID = [currentStartId, currentStartId + length - 1];\n  @param currentStartId           The uid for the first claim condition amongst the current set of\n                                  claim conditions. The uid for each next claim condition is one\n                                  more than the previous claim condition's uid.\n  @param count                    The total number of phases / claim conditions in the list\n                                  of claim conditions.\n  @param conditions                   The claim conditions at a given uid. Claim conditions\n                                  are ordered in an ascending order by their `startTimestamp`.\n  @param supplyClaimedByWallet    Map from a claim condition uid and account to supply claimed by account."
									},
									"id": 44,
									"members": [
										{
											"constant": false,
											"id": 30,
											"mutability": "mutable",
											"name": "currentStartId",
											"nameLocation": "1641:14:1",
											"nodeType": "VariableDeclaration",
											"scope": 44,
											"src": "1633:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 29,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1633:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 32,
											"mutability": "mutable",
											"name": "count",
											"nameLocation": "1673:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 44,
											"src": "1665:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 31,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1665:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 37,
											"mutability": "mutable",
											"name": "conditions",
											"nameLocation": "1723:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 44,
											"src": "1688:45:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ClaimCondition_$20_storage_$",
												"typeString": "mapping(uint256 => struct IClaimCondition.ClaimCondition)"
											},
											"typeName": {
												"id": 36,
												"keyName": "",
												"keyNameLocation": "-1:-1:-1",
												"keyType": {
													"id": 33,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1696:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1688:34:1",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ClaimCondition_$20_storage_$",
													"typeString": "mapping(uint256 => struct IClaimCondition.ClaimCondition)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 35,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 34,
														"name": "ClaimCondition",
														"nameLocations": [
															"1707:14:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 20,
														"src": "1707:14:1"
													},
													"referencedDeclaration": 20,
													"src": "1707:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ClaimCondition_$20_storage_ptr",
														"typeString": "struct IClaimCondition.ClaimCondition"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 43,
											"mutability": "mutable",
											"name": "supplyClaimedByWallet",
											"nameLocation": "1791:21:1",
											"nodeType": "VariableDeclaration",
											"scope": 44,
											"src": "1743:69:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
												"typeString": "mapping(uint256 => mapping(address => uint256))"
											},
											"typeName": {
												"id": 42,
												"keyName": "",
												"keyNameLocation": "-1:-1:-1",
												"keyType": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1751:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1743:47:1",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
													"typeString": "mapping(uint256 => mapping(address => uint256))"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 41,
													"keyName": "",
													"keyNameLocation": "-1:-1:-1",
													"keyType": {
														"id": 39,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1770:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Mapping",
													"src": "1762:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
														"typeString": "mapping(address => uint256)"
													},
													"valueName": "",
													"valueNameLocation": "-1:-1:-1",
													"valueType": {
														"id": 40,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1781:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ClaimConditionList",
									"nameLocation": "1604:18:1",
									"nodeType": "StructDefinition",
									"scope": 45,
									"src": "1597:222:1",
									"visibility": "public"
								}
							],
							"scope": 46,
							"src": "585:1236:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "39:1782:1"
				},
				"id": 1
			}
		}
	}
}